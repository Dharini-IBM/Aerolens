import React, { useEffect, useState } from 'react';
import { Typography, Box, Card, CardContent, Button, CircularProgress, Stack, Chip, Drawer, List, ListItem, ListItemText } from '@mui/material';
import RefreshIcon from '@mui/icons-material/Refresh';
import { MapContainer, TileLayer, Polyline, Marker, Popup, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import { fetchTrafficRoutes } from '../services/trafficService';

const congestionColor = (level) => {
  switch (level) {
    case 'Low': return 'green';
    case 'Moderate': return 'orange';
    case 'High': return 'red';
    default: return 'blue';
  }
};

function FitBounds({ routes }) {
  const map = useMap();
  useEffect(() => {
    if (!routes.length) return;
    const allCoords = routes.flatMap(r => r.coordinates || []);
    if (allCoords.length > 0) {
      map.fitBounds(allCoords);
    }
  }, [routes, map]);
  return null;
}

const TrafficMap = () => {
  const [routes, setRoutes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [selectedRoute, setSelectedRoute] = useState(null);

  const loadRoutes = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await fetchTrafficRoutes();
      setRoutes(res.data);
    } catch (err) {
      setError('Failed to load routes');
    }
    setLoading(false);
  };

  useEffect(() => {
    loadRoutes();
    // Optionally, poll every 10s for real-time effect
    // const interval = setInterval(loadRoutes, 10000);
    // return () => clearInterval(interval);
  }, []);

  return (
    <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3 }}>
      <Box sx={{ flex: 2, minWidth: 0 }}>
        <Stack direction="row" alignItems="center" justifyContent="space-between" mb={2}>
          <Typography variant="h6">Real-Time Traffic Optimization</Typography>
          <Button variant="outlined" startIcon={<RefreshIcon />} onClick={loadRoutes} disabled={loading}>
            Refresh
          </Button>
        </Stack>
        <Typography mb={2}>Dynamic routes generated by AI drone surveillance.</Typography>
        <Box sx={{ height: 400, width: '100%', mb: 2, borderRadius: 2, overflow: 'hidden', boxShadow: 2 }}>
          <MapContainer style={{ height: '100%', width: '100%' }} center={[12.9716, 77.5946]} zoom={13} scrollWheelZoom={true}>
            <TileLayer
              attribution='&copy; <a href="https://osm.org/copyright">OpenStreetMap</a> contributors'
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            <FitBounds routes={routes.filter(r => r.coordinates)} />
            {routes.map((route, idx) =>
              route.coordinates ? (
                <React.Fragment key={route.id}>
                  <Polyline
                    positions={route.coordinates}
                    pathOptions={{ color: congestionColor(route.congestion), weight: 6 }}
                    eventHandlers={{
                      click: () => {
                        setSelectedRoute(route);
                        setDrawerOpen(true);
                      }
                    }}
                  />
                  <Marker position={route.coordinates[0]}>
                    <Popup>
                      <b>Start</b>: {route.route.split('→')[0].trim()}
                    </Popup>
                  </Marker>
                  <Marker position={route.coordinates[route.coordinates.length - 1]}>
                    <Popup>
                      <b>End</b>: {route.route.split('→').slice(-1)[0].trim()}
                    </Popup>
                  </Marker>
                </React.Fragment>
              ) : null
            )}
          </MapContainer>
        </Box>
        {loading ? (
          <Box display="flex" justifyContent="center" my={4}><CircularProgress /></Box>
        ) : error ? (
          <Typography color="error">{error}</Typography>
        ) : null}
      </Box>
      <Box sx={{ flex: 1, minWidth: 280 }}>
        <Typography variant="subtitle1" mb={1}>Route Suggestions</Typography>
        <List>
          {routes.map((route) => (
            <ListItem
              key={route.id}
              button
              onClick={() => { setSelectedRoute(route); setDrawerOpen(true); }}
              sx={{ borderLeft: `6px solid ${congestionColor(route.congestion)}`, mb: 1, borderRadius: 1 }}
            >
              <ListItemText
                primary={route.route}
                secondary={<>
                  <Chip label={`Congestion: ${route.congestion}`} color={route.congestion === 'High' ? 'error' : route.congestion === 'Moderate' ? 'warning' : 'success'} size="small" sx={{ mr: 1 }} />
                  {/* Optionally add ETA, distance, etc. */}
                </>}
              />
            </ListItem>
          ))}
        </List>
      </Box>
      <Drawer anchor="right" open={drawerOpen} onClose={() => setDrawerOpen(false)}>
        <Box sx={{ width: 320, p: 3 }}>
          {selectedRoute && (
            <>
              <Typography variant="h6" gutterBottom>Route Details</Typography>
              <Typography><b>Route:</b> {selectedRoute.route}</Typography>
              <Typography><b>Congestion:</b> <Chip label={selectedRoute.congestion} color={congestionColor(selectedRoute.congestion)} /></Typography>
              {/* Optionally add more details here */}
            </>
          )}
        </Box>
      </Drawer>
    </Box>
  );
};

export default TrafficMap;